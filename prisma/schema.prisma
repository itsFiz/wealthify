// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User & Authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For email/password authentication
  role          UserRole  @default(USER)
  permissions   String[]  @default([])
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  
  // Financial tracking
  currentBalance    Decimal   @default(0)  // Current bank balance/savings
  startingBalance   Decimal   @default(0)  // Starting balance when user first joined
  balanceUpdatedAt  DateTime? // When balance was last manually updated
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth relations
  accounts Account[]
  sessions Session[]
  
  // Relations
  incomeStreams IncomeStream[]
  expenses      Expense[]
  goals         Goal[]
  budgets       Budget[]
  monthlySnapshots MonthlySnapshot[]
  balanceEntries BalanceEntry[]
  balanceProjections BalanceProjection[]
  oneTimeIncomes OneTimeIncome[]
  oneTimeExpenses OneTimeExpense[]
  purchasePlans PurchasePlan[]
  
  @@map("users")
}

// Income Streams
model IncomeStream {
  id          String   @id @default(cuid())
  userId      String
  name        String   // e.g., "Full-time Salary", "Startup Revenue"
  type        IncomeType
  expectedMonthly Decimal
  actualMonthly   Decimal?
  frequency   Frequency @default(MONTHLY)
  earnedDate  DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  entries     IncomeEntry[]
  
  @@map("income_streams")
}

model IncomeEntry {
  id              String   @id @default(cuid())
  incomeStreamId  String
  amount          Decimal
  month           DateTime
  notes           String?
  createdAt       DateTime @default(now())
  
  incomeStream    IncomeStream @relation(fields: [incomeStreamId], references: [id])
  
  @@map("income_entries")
}

// Expenses & Burn Tracking
model Expense {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    ExpenseCategory
  type        ExpenseType // FIXED, VARIABLE, STARTUP_BURN
  amount      Decimal
  frequency   Frequency // MONTHLY, WEEKLY, ONE_TIME
  incurredDate DateTime? // Date when expense was incurred/paid
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  entries     ExpenseEntry[]
  
  @@map("expenses")
}

model ExpenseEntry {
  id         String   @id @default(cuid())
  expenseId  String
  amount     Decimal
  month      DateTime
  notes      String?
  createdAt  DateTime @default(now())
  
  expense    Expense  @relation(fields: [expenseId], references: [id])
  
  @@map("expense_entries")
}

// One-time entries (not linked to recurring income streams/expenses)
model OneTimeIncome {
  id        String   @id @default(cuid())
  userId    String
  name      String   // e.g., "Freelance Project", "Affiliate Commission"
  amount    Decimal
  date      DateTime // Specific date of income
  category  String   // FREELANCE, AFFILIATE, ADSENSE, GIGS, BONUS, GIFT
  notes     String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("one_time_income")
}

model OneTimeExpense {
  id        String   @id @default(cuid())
  userId    String
  name      String   // e.g., "Medical Bill", "Car Repair"
  amount    Decimal
  date      DateTime // Specific date of expense
  category  String   // MEDICAL, REPAIRS, PURCHASES, TRAVEL, UNEXPECTED, OTHER
  notes     String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("one_time_expense")
}

// Purchase Plans for Financial Simulator
model PurchasePlan {
  id                String   @id @default(cuid())
  userId            String
  name              String   // e.g., "House Down Payment Plan", "Wedding Savings"
  purchaseType      String   // house, vehicle, wedding, business, custom
  targetAmount      Decimal
  currentSaved      Decimal  @default(0)
  desiredTimelineMonths Int
  downPaymentRatio  Decimal? // For applicable purchases
  appreciationRate  Decimal? // Annual rate as decimal
  notes             String?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id])
  
  @@map("purchase_plans")
}

// Goals & Milestones
model Goal {
  id              String   @id @default(cuid())
  userId          String
  name            String   // e.g., "GT86 Purchase", "House Down Payment"
  description     String?
  targetAmount    Decimal
  currentAmount   Decimal  @default(0)
  targetDate      DateTime
  priority        Int      @default(1)
  category        GoalCategory
  isCompleted     Boolean  @default(false)
  
  // Asset depreciation/appreciation fields
  isAssetGoal         Boolean? @default(false)
  initialAssetPrice   Decimal?
  depreciationRate    Decimal? // Negative for appreciation (e.g., property)
  downPaymentRatio    Decimal? // For financing calculations
  projectedPrice      Decimal? // Calculated projected price at target date
  
  // Image upload
  imageUrl        String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  contributions   GoalContribution[]
  
  @@map("goals")
}

model GoalContribution {
  id        String   @id @default(cuid())
  goalId    String
  amount    Decimal
  month     DateTime
  notes     String?
  createdAt DateTime @default(now())
  
  goal      Goal     @relation(fields: [goalId], references: [id])
  
  @@map("goal_contributions")
}

// Budget Planning
model Budget {
  id              String   @id @default(cuid())
  userId          String
  month           DateTime
  totalIncome     Decimal
  totalExpenses   Decimal
  totalSavings    Decimal
  burnRate        Decimal  // Percentage
  savingsRate     Decimal  @default(0) // Percentage
  healthScore     Int      @default(0)
  activeGoals     Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, month])
  @@map("budgets")
}

// Monthly Financial Snapshots for Trend Analysis
model MonthlySnapshot {
  id                String   @id @default(cuid())
  userId            String
  month             DateTime // First day of the month for consistency
  
  // Core financial metrics
  totalIncome       Decimal  @default(0)
  totalExpenses     Decimal  @default(0)
  totalSavings      Decimal  @default(0)
  burnRate          Decimal  @default(0)
  savingsRate       Decimal  @default(0)
  healthScore       Int      @default(0)
  
  // Balance tracking
  startingBalance   Decimal  @default(0)  // Balance at start of month
  endingBalance     Decimal  @default(0)  // Balance at end of month
  balanceChange     Decimal  @default(0)  // Change in balance this month
  isProjected       Boolean  @default(false) // Whether this is a projected month
  
  // Goal tracking
  activeGoalsCount  Int      @default(0)
  completedGoalsCount Int    @default(0)
  totalGoalsValue   Decimal  @default(0)
  totalGoalsProgress Decimal @default(0)
  
  // Income/Expense breakdown counts
  incomeStreamsCount Int     @default(0)
  expensesCount     Int      @default(0)
  
  // Trends (calculated fields)
  incomeChangePercent    Decimal? // vs previous month
  expenseChangePercent   Decimal? // vs previous month
  savingsChangePercent   Decimal? // vs previous month
  healthScoreChange      Int?     // vs previous month
  balanceChangePercent   Decimal? // vs previous month
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, month])
  @@map("monthly_snapshots")
}

// Balance Entry for manual balance updates
model BalanceEntry {
  id            String   @id @default(cuid())
  userId        String
  amount        Decimal  // New balance amount
  previousAmount Decimal @default(0) // Previous balance for tracking
  changeAmount  Decimal  @default(0) // Change from previous
  entryType     BalanceEntryType @default(MANUAL_UPDATE)
  notes         String?
  entryDate     DateTime @default(now())
  createdAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id])
  
  @@map("balance_entries")
}

// Balance Projections for future months
model BalanceProjection {
  id                String   @id @default(cuid())
  userId            String
  month             DateTime // Future month being projected
  projectedIncome   Decimal  @default(0)
  projectedExpenses Decimal  @default(0)
  projectedSavings  Decimal  @default(0)
  projectedBalance  Decimal  @default(0)
  confidenceLevel   Decimal  @default(0.8) // 0.0 to 1.0 confidence in projection
  
  // Assumptions used for projection
  assumptions       Json?    // Store projection assumptions as JSON
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, month])
  @@map("balance_projections")
}

// Enums
enum IncomeType {
  SALARY
  BUSINESS
  FREELANCE
  INVESTMENT
  PASSIVE
  OTHER
}

enum ExpenseCategory {
  HOUSING
  TRANSPORTATION
  FOOD
  UTILITIES
  ENTERTAINMENT
  HEALTHCARE
  BUSINESS
  PERSONAL
  OTHER
}

enum ExpenseType {
  FIXED
  VARIABLE
  STARTUP_BURN
}

enum Frequency {
  MONTHLY
  WEEKLY
  YEARLY
  ONE_TIME
}

enum GoalCategory {
  EMERGENCY_FUND
  DEBT_PAYOFF
  PROPERTY
  VEHICLE
  INVESTMENT
  VACATION
  BUSINESS
  OTHER
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  PREMIUM_USER
  READONLY
}

enum BalanceEntryType {
  MANUAL_UPDATE      // User manually updated balance
  AUTOMATIC_SYNC     // Synced from bank/financial institution
  GOAL_CONTRIBUTION  // Balance change from goal contribution
  INCOME_RECEIVED    // Balance increase from income
  EXPENSE_PAID       // Balance decrease from expense
  CORRECTION         // Manual correction/adjustment
} 